name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for RabbitMQ and PostgreSQL to be ready
        run: |
          until curl -I http://localhost:15672 2>&1 | grep -q '200 OK'; do echo "Waiting for RabbitMQ..."; sleep 5; done
          until pg_isready -h localhost -p 5432 -U test_user; do echo "Waiting for PostgreSQL..."; sleep 5; done
        timeout-minutes: 5

      - name: Initialize the Database
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
        run: |
          python app/database/init_db.py

      - name: Run unit tests
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          RABBITMQ_URL: "amqp://guest:guest@localhost:5672/"
          GOOGLE_API_KEY: "dummy_key"
        run: |
          python -m unittest discover -s tests

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Log in to Heroku Container Registry
        run: |
          echo "$HEROKU_API_KEY" | docker login --username="$HEROKU_USERNAME" --password-stdin registry.heroku.com
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_USERNAME: ${{ secrets.HEROKU_USERNAME }}

      - name: Build Docker container
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Push Docker container to Heroku
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release container on Heroku
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
